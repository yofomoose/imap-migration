#!/bin/bash

ACCOUNTS_FILE="accounts.csv"
LOGS_DIR="logs"
AUTH_LOG="auth_check.log"
MAX_PARALLEL=5
COUNTER=0

mkdir -p "$LOGS_DIR"
> "$AUTH_LOG"

echo "üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $(date)"

check_auth() {
    local email="$1"
    local server="$2"
    local password="$3"

    expect <<EOF >> "$AUTH_LOG"
        log_user 0
        spawn openssl s_client -connect $server:993 -quiet
        expect {
            "*OK*" {
                send "a login $email \"$password\"\r"
                expect {
                    "*OK*" {
                        puts "‚úÖ $email - $server: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
                        exit 0
                    }
                    "*NO*" {
                        puts "‚ùå $email - $server: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)"
                        exit 1
                    }
                    timeout {
                        puts "‚ùå $email - $server: –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                        exit 1
                    }
                }
            }
            timeout {
                puts "‚ùå $email - $server: –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
                exit 1
            }
        }
EOF
}

mapfile -t AUTH_LINES < <(tail -n +2 "$ACCOUNTS_FILE")
GOOD_ACCOUNTS=()
BAD_ACCOUNTS=()

for line in "${AUTH_LINES[@]}"; do
    IFS=',' read -r SRC_EMAIL SRC_IMAP SRC_PASS DST_EMAIL DST_PASS DST_IMAP <<<"$(echo "$line" | sed 's/^"\(.*\)"$/\1/' | awk -F'","?' '{ for(i=1;i<=NF;i++) gsub(/^"|"$/, "", $i); print }')"

    check_auth "$SRC_EMAIL" "$SRC_IMAP" "$SRC_PASS" && \
    check_auth "$DST_EMAIL" "$DST_IMAP" "$DST_PASS"

    if [[ $? -eq 0 ]]; then
        GOOD_ACCOUNTS+=("$line")
    else
        BAD_ACCOUNTS+=("$line")
    fi
done

echo -e "\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:"
cat "$AUTH_LOG"

if [ "${#GOOD_ACCOUNTS[@]}" -eq 0 ]; then
    echo "‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —è—â–∏–∫–æ–≤. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ."
    exit 1
fi

echo
read -rp "üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –¥–ª—è ${#GOOD_ACCOUNTS[@]} —è—â–∏–∫–æ–≤? [y/N]: " CONFIRM
[[ "$CONFIRM" =~ ^[Yy]$ ]] || exit 0

echo -e "\nüöÄ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–Ω–æ—Å–∞: $(date)"
START_TIME=$(date +%s)

for line in "${GOOD_ACCOUNTS[@]}"; do
    IFS=',' read -r SRC_EMAIL SRC_IMAP SRC_PASS DST_EMAIL DST_PASS DST_IMAP <<<"$(echo "$line" | sed 's/^"\(.*\)"$/\1/' | awk -F'","?' '{ for(i=1;i<=NF;i++) gsub(/^"|"$/, "", $i); print }')"

    LOG_FILE="$LOGS_DIR/$(echo "$SRC_EMAIL" | tr '@' '_' | tr '.' '_').log"
    echo "üöÄ –°—Ç–∞—Ä—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞: $SRC_EMAIL -> $DST_EMAIL (PID –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω)"

    imapsync \
        --host1 "$SRC_IMAP" --user1 "$SRC_EMAIL" --password1 "$SRC_PASS" --ssl1 \
        --host2 "$DST_IMAP" --user2 "$DST_EMAIL" --password2 "$DST_PASS" --ssl2 \
        --automap --useuid --nofoldersizes \
        --log "$LOG_FILE" \
        --progress \
        &

    ((COUNTER++))
    if (( COUNTER % MAX_PARALLEL == 0 )); then
        wait
    fi
done

wait

END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

echo -e "\n‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –û–±—â–µ–µ –≤—Ä–µ–º—è: $DURATION —Å–µ–∫—É–Ω–¥ (~$((DURATION / 60)) –º–∏–Ω—É—Ç)"
echo "üìÇ –õ–æ–≥–∏ –≤ –ø–∞–ø–∫–µ: $LOGS_DIR"
